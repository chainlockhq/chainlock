/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VaultInterface extends ethers.utils.Interface {
  functions: {
    "accounts(uint256)": FunctionFragment;
    "addPendingMember(address)": FunctionFragment;
    "createAccount(string)": FunctionFragment;
    "getMembersByAccountId(uint256)": FunctionFragment;
    "getOwnEncryptedPrivateKey()": FunctionFragment;
    "getOwnSecretIds()": FunctionFragment;
    "getPublicKey(address)": FunctionFragment;
    "isMember(address)": FunctionFragment;
    "joinVault(string,string)": FunctionFragment;
    "members(address)": FunctionFragment;
    "membersByAccount(uint256,uint256)": FunctionFragment;
    "pendingMembers(address)": FunctionFragment;
    "secrets(uint256)": FunctionFragment;
    "storeSecret(address,uint256,string,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addPendingMember",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMembersByAccountId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnEncryptedPrivateKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnSecretIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicKey",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isMember", values: [string]): string;
  encodeFunctionData(
    functionFragment: "joinVault",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "members", values: [string]): string;
  encodeFunctionData(
    functionFragment: "membersByAccount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingMembers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "secrets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storeSecret",
    values: [string, BigNumberish, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPendingMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembersByAccountId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnEncryptedPrivateKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnSecretIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "membersByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "secrets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeSecret",
    data: BytesLike
  ): Result;

  events: {
    "AccountCreated(address,uint256)": EventFragment;
    "SecretCreated(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SecretCreated"): EventFragment;
}

export type AccountCreatedEvent = TypedEvent<
  [string, BigNumber] & { creator: string; accountId: BigNumber }
>;

export type SecretCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    creator: string;
    receiver: string;
    accountId: BigNumber;
    secretId: BigNumber;
  }
>;

export class Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VaultInterface;

  functions: {
    accounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { identifier: string }>;

    addPendingMember(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAccount(
      identifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMembersByAccountId(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getOwnEncryptedPrivateKey(overrides?: CallOverrides): Promise<[string]>;

    getOwnSecretIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getPublicKey(addr: string, overrides?: CallOverrides): Promise<[string]>;

    isMember(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    joinVault(
      encryptedPrivateKey: string,
      publicKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { encryptedPrivateKey: string; publicKey: string }
    >;

    membersByAccount(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pendingMembers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    secrets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & {
        encryptedUsername: string;
        encryptedPassword: string;
      }
    >;

    storeSecret(
      member: string,
      accountId: BigNumberish,
      encryptedUsername: string,
      encryptedPassword: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accounts(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  addPendingMember(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAccount(
    identifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMembersByAccountId(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getOwnEncryptedPrivateKey(overrides?: CallOverrides): Promise<string>;

  getOwnSecretIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getPublicKey(addr: string, overrides?: CallOverrides): Promise<string>;

  isMember(addr: string, overrides?: CallOverrides): Promise<boolean>;

  joinVault(
    encryptedPrivateKey: string,
    publicKey: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  members(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { encryptedPrivateKey: string; publicKey: string }
  >;

  membersByAccount(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  pendingMembers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  secrets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { encryptedUsername: string; encryptedPassword: string }
  >;

  storeSecret(
    member: string,
    accountId: BigNumberish,
    encryptedUsername: string,
    encryptedPassword: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accounts(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    addPendingMember(addr: string, overrides?: CallOverrides): Promise<void>;

    createAccount(
      identifier: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMembersByAccountId(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getOwnEncryptedPrivateKey(overrides?: CallOverrides): Promise<string>;

    getOwnSecretIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getPublicKey(addr: string, overrides?: CallOverrides): Promise<string>;

    isMember(addr: string, overrides?: CallOverrides): Promise<boolean>;

    joinVault(
      encryptedPrivateKey: string,
      publicKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { encryptedPrivateKey: string; publicKey: string }
    >;

    membersByAccount(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    pendingMembers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    secrets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & {
        encryptedUsername: string;
        encryptedPassword: string;
      }
    >;

    storeSecret(
      member: string,
      accountId: BigNumberish,
      encryptedUsername: string,
      encryptedPassword: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AccountCreated(address,uint256)"(
      creator?: null,
      accountId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { creator: string; accountId: BigNumber }
    >;

    AccountCreated(
      creator?: null,
      accountId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { creator: string; accountId: BigNumber }
    >;

    "SecretCreated(address,address,uint256,uint256)"(
      creator?: null,
      receiver?: null,
      accountId?: null,
      secretId?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        creator: string;
        receiver: string;
        accountId: BigNumber;
        secretId: BigNumber;
      }
    >;

    SecretCreated(
      creator?: null,
      receiver?: null,
      accountId?: null,
      secretId?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        creator: string;
        receiver: string;
        accountId: BigNumber;
        secretId: BigNumber;
      }
    >;
  };

  estimateGas: {
    accounts(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    addPendingMember(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAccount(
      identifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMembersByAccountId(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnEncryptedPrivateKey(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnSecretIds(overrides?: CallOverrides): Promise<BigNumber>;

    getPublicKey(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isMember(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    joinVault(
      encryptedPrivateKey: string,
      publicKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    members(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    membersByAccount(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingMembers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    secrets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    storeSecret(
      member: string,
      accountId: BigNumberish,
      encryptedUsername: string,
      encryptedPassword: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPendingMember(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAccount(
      identifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMembersByAccountId(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnEncryptedPrivateKey(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnSecretIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPublicKey(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMember(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinVault(
      encryptedPrivateKey: string,
      publicKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    membersByAccount(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingMembers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    secrets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storeSecret(
      member: string,
      accountId: BigNumberish,
      encryptedUsername: string,
      encryptedPassword: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
